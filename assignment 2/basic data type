{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "c97e181a-503a-48bc-9262-cecac0a082f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h1>String Based Practice Problem solution</h1>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import display, HTML\n",
    "display(HTML('<h1>String Based Practice Problem solution</h1>'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "865f6fda-2739-4b9a-abad-0fdd0792c7e9",
   "metadata": {},
   "source": [
    "1. Write a program to reverse a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2415a414-2dbd-43ce-b99e-7ad1b66c6957",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "!dlroW ,olleH\n"
     ]
    }
   ],
   "source": [
    "def reverse_string(input_string):\n",
    "    return input_string[::-1]\n",
    "\n",
    "print(reverse_string(\"Hello, World!\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2da98a2e-37fe-431c-8f25-ecc43daf8f7c",
   "metadata": {},
   "source": [
    "2.Check if a string is a palindrome."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "942e8f46-f46e-44b8-b8e6-e22ef35b9298",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " malylam\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Yes\n"
     ]
    }
   ],
   "source": [
    "def isPalindrome(s):\n",
    "    return s == s[::-1]\n",
    " \n",
    "\n",
    "s = input()\n",
    "ans = isPalindrome(s)\n",
    " \n",
    "if ans:\n",
    "    print(\"Yes\")\n",
    "else:\n",
    "    print(\"No\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d4e719f-c2f9-46cf-9ac0-505f8744a1c0",
   "metadata": {},
   "source": [
    "3.Convert a string to uppercase."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8b01f0b0-55e4-4b89-a113-8d64a9e25f3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HELLO WORLD\n"
     ]
    }
   ],
   "source": [
    "input_string = \"Hello World\"\n",
    "uppercase_string = input_string.upper()\n",
    "print(uppercase_string)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c257cc73-c146-4402-a94c-1e53edd801a3",
   "metadata": {},
   "source": [
    "4. Convert a string to lowercase."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c0e5ad18-aedf-4ad9-b356-9856dbb2531b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "my name is pallavi\n"
     ]
    }
   ],
   "source": [
    "input_string = \"MY NAME IS PALLAVI\"\n",
    "uppercase_string = input_string.lower()\n",
    "print(uppercase_string)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c319b56f-aafc-4051-9d69-8385d878f18a",
   "metadata": {},
   "source": [
    "5. Count the number of vowels in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "650dba3f-2388-4899-8a27-e5059ba589ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "def count_vowels(s):\n",
    "    vowels = 'aeiouAEIOU'\n",
    "    return sum(s.count(vowel) for vowel in vowels)\n",
    "\n",
    "s = 'Hello World'\n",
    "print(count_vowels(s))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39caeef3-10ac-4b42-94e7-244a3b929c6d",
   "metadata": {},
   "source": [
    "6. Count the number of consonants in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ac27c0a8-215a-41a9-a5ad-c012c384279e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    }
   ],
   "source": [
    "def count_consonants(s):\n",
    "    vowels = 'aeiouAEIOU'\n",
    "    consonants = 0\n",
    "\n",
    "    for char in s:\n",
    "        if char.isalpha() and char not in vowels:\n",
    "            consonants += 1\n",
    "\n",
    "    return consonants\n",
    "\n",
    "s = 'Hello World'\n",
    "print(count_consonants(s))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6392c64f-cf8b-4d27-9fb5-ccf7884605ca",
   "metadata": {},
   "source": [
    "7. Remove all whitespaces from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dbb39aac-f8ec-4da7-a935-dc276d1b7053",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mynameispallavi\n"
     ]
    }
   ],
   "source": [
    "s = 'My name is pallavi'\n",
    "s_without_spaces = ''.join(s.split())\n",
    "print(s_without_spaces)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fbfdb05-b7c5-4a05-8a39-93235188452f",
   "metadata": {},
   "source": [
    "8. Find the length of a string without using the `len()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "68d00a58-3557-43a8-ba6f-d39159d570f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "s = 'Pallavi'\n",
    "s_length = s.count('')\n",
    "print(s_length) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8dda607d-5f61-4d7b-b057-49be80068a24",
   "metadata": {},
   "source": [
    "9. Check if a string contains a specific word."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ab8a856b-8e99-4c17-b294-b1783ff03f1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'Pallavi' is in the string.\n"
     ]
    }
   ],
   "source": [
    "s = 'My Name is Pallavi'\n",
    "word = 'Pallavi'\n",
    "word_count = s.count(word)\n",
    "\n",
    "if word_count > 0:\n",
    "    print(f\"'{word}' is in the string.\")\n",
    "else:\n",
    "    print(f\"'{word}' is not in the string.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78fc8964-d9ad-4f58-ac1f-f3ac732645c5",
   "metadata": {},
   "source": [
    "10. Replace a word in a string with another word."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1287737a-666a-48e9-a4fa-ca752c555f6a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My Name is kaya\n"
     ]
    }
   ],
   "source": [
    "s = 'My Name is Pallavi'\n",
    "word_to_replace = 'Pallavi'\n",
    "replacement_word = 'kaya'\n",
    "\n",
    "s_with_replacement = s.replace(word_to_replace, replacement_word)\n",
    "print(s_with_replacement)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "157577a4-aeeb-44fd-bd37-a543d5550502",
   "metadata": {},
   "source": [
    "11. Count the occurrences of a word in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "70f24294-3d2c-4525-bf4b-726222022c46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "s = 'singing is my passion.I would love to make singing as my carrier too '\n",
    "word_to_count = 'singing'\n",
    "\n",
    "word_count = s.count(word_to_count)\n",
    "print(word_count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9640271-76b3-40de-bd48-5e6c27872895",
   "metadata": {},
   "source": [
    "12. Find the first occurrence of a word in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "00068aa2-978b-4042-b90e-7185b5b265d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The first occurrence of 'brown' is at index 2.\n"
     ]
    }
   ],
   "source": [
    "def find_first_occurrence(text, word):\n",
    "    words = text.split()\n",
    "    try:\n",
    "        index = words.index(word)\n",
    "        return index\n",
    "    except ValueError:\n",
    "        return -1\n",
    "\n",
    "text = \"The quick brown fox jumps over the lazy dog\"\n",
    "word = \"brown\"\n",
    "\n",
    "index = find_first_occurrence(text, word)\n",
    "\n",
    "if index != -1:\n",
    "    print(f\"The first occurrence of '{word}' is at index {index}.\")\n",
    "else:\n",
    "    print(f\"The word '{word}' was not found in the text.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "664a867b-fb83-46d2-a76d-c4b430108f2e",
   "metadata": {},
   "source": [
    "13. Find the last occurrence of a word in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "dc633e54-3a45-4154-b10f-46ed0921a3d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The last occurrence of 'lazy' is at index 7.\n"
     ]
    }
   ],
   "source": [
    "def find_last_occurrence(text, word):\n",
    "    words = text.split()\n",
    "    try:\n",
    "        index = len(words) - 1 - words[::-1].index(word)\n",
    "        return index\n",
    "    except ValueError:\n",
    "        return -1\n",
    "\n",
    "text = \"The quick brown fox jumps over the lazy dog\"\n",
    "word = \"lazy\"\n",
    "\n",
    "index = find_last_occurrence(text, word)\n",
    "\n",
    "if index != -1:\n",
    "    print(f\"The last occurrence of '{word}' is at index {index}.\")\n",
    "else:\n",
    "    print(f\"The word '{word}' was not found in the text.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ff1264a-a272-40e2-82a8-b07826ccc1bb",
   "metadata": {},
   "source": [
    "14. Split a string into a list of words."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9864dc65-216a-44dc-9a31-e55d3174faf0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['My', 'name', 'is', 'Pallavi']"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s= \"My name is Pallavi\"\n",
    "s.split()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eba2fac4-ba8f-4681-9bb7-f22112e5d22b",
   "metadata": {},
   "source": [
    "15. Join a list of words into a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "7c0d5f75-e591-41f0-b3ad-b2189dee78ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " sentence is I love tea\n"
     ]
    }
   ],
   "source": [
    "word = [\"I love tea\"]\n",
    "\n",
    "s1 = \",\".join(word)\n",
    "\n",
    "print(\" sentence is\", s1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c5b2d59-b4e3-4629-820f-b2e70c6960c6",
   "metadata": {},
   "source": [
    "16. Convert a string where words are separated by spaces to one where words are separated by underscores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "145e17b6-b4c9-4fb1-bfec-c0aef697cbbd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This_is_my_favorite_dish\n"
     ]
    }
   ],
   "source": [
    "def convert_to_underscore(input_string):\n",
    "    # Replace all spaces with underscores\n",
    "    return input_string.replace(' ', '_')\n",
    "\n",
    "input_string = \"This is my favorite dish\"\n",
    "output_string = convert_to_underscore(input_string)\n",
    "print(output_string)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96127f08-61a8-4da7-ac28-d16b829a1e96",
   "metadata": {},
   "source": [
    "17. Check if a string starts with a specific word or phrase."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "533f3d7e-4397-4c16-9af9-570a878a5a2f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The text starts with the prefix.\n"
     ]
    }
   ],
   "source": [
    "def starts_with(text, prefix):\n",
    "    # Step 1: Use the startswith() method to check if the text starts with the specified prefix.\n",
    "    is_start = text.startswith(prefix)\n",
    "\n",
    "    # Step 2: Return the result of the check.\n",
    "    return is_start\n",
    "\n",
    "# Example usage\n",
    "text = \"Hello, world!\"\n",
    "prefix = \"Hello\"\n",
    "result = starts_with(text, prefix)\n",
    "if result:\n",
    "    print(\"The text starts with the prefix.\")\n",
    "else:\n",
    "    print(\"The text does not start with the prefix.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24157313-f8eb-4fd1-abc6-640f8f794bbd",
   "metadata": {},
   "source": [
    "18. Check if a string ends with a specific word or phrase."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "020062ee-0a48-4e8d-b23a-6f30acb9ca93",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The text ends with the suffix.\n"
     ]
    }
   ],
   "source": [
    "def ends_with(text, suffix):\n",
    "    # Step 1: Use the endswith() method to check if the text ends with the specified suffix.\n",
    "    is_end = text.endswith(suffix)\n",
    "\n",
    "    # Step 2: Return the result of the check.\n",
    "    return is_end\n",
    "\n",
    "# Example usage\n",
    "text = \"Hello, world!\"\n",
    "suffix = \"world!\"\n",
    "result = ends_with(text, suffix)\n",
    "if result:\n",
    "    print(\"The text ends with the suffix.\")\n",
    "else:\n",
    "    print(\"The text does not end with the suffix.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4b1ce3e-b17c-41d1-9574-43e8e560954c",
   "metadata": {},
   "source": [
    "19. Convert a string to title case (e.g., \"hello world\" to \"Hello World\")."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "843f4f92-3381-4923-82b1-2ca88e876822",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'hello world' in title case is 'Hello World'.\n"
     ]
    }
   ],
   "source": [
    "def convert_to_title_case(input_string):\n",
    "    # Convert the input string to title case\n",
    "    return input_string.title()\n",
    "\n",
    "input_string = \"hello world\"\n",
    "\n",
    "title_case_string = convert_to_title_case(input_string)\n",
    "print(f\"'{input_string}' in title case is '{title_case_string}'.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64741e83-66e6-4125-9beb-ce6e1d22b453",
   "metadata": {},
   "source": [
    "20. Find the longest word in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "839771e1-c1bc-4df3-aee3-8b11f1d7ae3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The longest word in 'Hello world My name is pallavi.' is 'pallavi.'.\n"
     ]
    }
   ],
   "source": [
    "def find_longest_word(input_string):\n",
    "    # Split the input string into words\n",
    "    words = input_string.split()\n",
    "\n",
    "    # Find the longest word\n",
    "    longest_word = max(words, key=len)\n",
    "\n",
    "    return longest_word\n",
    "\n",
    "input_string = \"Hello world My name is pallavi.\"\n",
    "\n",
    "longest_word = find_longest_word(input_string)\n",
    "print(f\"The longest word in '{input_string}' is '{longest_word}'.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d1aae59-b9d7-4a9d-82c8-0f678ecba7bd",
   "metadata": {},
   "source": [
    "21. Find the shortest word in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5c242466-a736-402c-ab20-db948c168159",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shortest word in 'Hello world! This is an example string.' is 'is'.\n"
     ]
    }
   ],
   "source": [
    "def find_shortest_word(input_string):\n",
    "    # Split the input string into words\n",
    "    words = input_string.split()\n",
    "\n",
    "    # Find the shortest word\n",
    "    shortest_word = min(words, key=len)\n",
    "\n",
    "    return shortest_word\n",
    "\n",
    "input_string = \"Hello world! This is an example string.\"\n",
    "\n",
    "shortest_word = find_shortest_word(input_string)\n",
    "print(f\"The shortest word in '{input_string}' is '{shortest_word}'.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14c87e99-2594-495e-8152-707d63b75564",
   "metadata": {},
   "source": [
    "22. Reverse the order of words in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fd852035-7a31-4e5c-b64c-dd5627f6e785",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The reversed order of words in 'Hello world! This is an example string.' is 'string. example an is This world! Hello'.\n"
     ]
    }
   ],
   "source": [
    "def reverse_words_order(input_string):\n",
    "    # Split the input string into words\n",
    "    words = input_string.split()\n",
    "\n",
    "    # Reverse the order of words\n",
    "    reversed_words = words[::-1]\n",
    "\n",
    "    return ' '.join(reversed_words)\n",
    "\n",
    "input_string = \"Hello world! This is an example string.\"\n",
    "\n",
    "reversed_string = reverse_words_order(input_string)\n",
    "print(f\"The reversed order of words in '{input_string}' is '{reversed_string}'.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5057f15-e35c-472b-9474-feaf6f22740f",
   "metadata": {},
   "source": [
    "23. Check if a string is alphanumeric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "be1b3b92-af7f-4bfc-9e04-d4b6fff2bb6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The string is alphanumeric.\n"
     ]
    }
   ],
   "source": [
    "def is_alphanumeric(text):\n",
    "    # Step 1: Use the isalnum() method to check if the string is alphanumeric.\n",
    "    return text.isalnum()\n",
    "\n",
    "# Example usage\n",
    "text = \"Hello123\"\n",
    "result = is_alphanumeric(text)\n",
    "if result:\n",
    "    print(\"The string is alphanumeric.\")\n",
    "else:\n",
    "    print(\"The string is not alphanumeric.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1192764a-6063-4b38-ab46-8bbb93244be4",
   "metadata": {},
   "source": [
    "24. Extract all digits from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d759723c-1f02-4734-a2c5-5b5156cdc92c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "123\n",
      "\n"
     ]
    }
   ],
   "source": [
    "def extract_digits(s):\n",
    "    return ''.join([digit for digit in s if digit.isdigit()])\n",
    "\n",
    "print(extract_digits(\"abc123ivtpsd\")) # \"123\" \n",
    "print(extract_digits(\"\")) # \"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d8c387f7-6822-43da-9231-98d7a2a3400a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracted digits: 123456\n"
     ]
    }
   ],
   "source": [
    "def extract_digits(text):\n",
    "    # Step 1: Initialize an empty string to store the extracted digits.\n",
    "    digits = \"\"\n",
    "\n",
    "    # Step 2: Iterate through each character in the text.\n",
    "    for char in text:\n",
    "        # Check if the character is a digit using the isdigit() method.\n",
    "        if char.isdigit():\n",
    "            # Append the digit to the digits string.\n",
    "            digits += char\n",
    "\n",
    "    # Step 3: Return the extracted digits.\n",
    "    return digits\n",
    "\n",
    "# Example usage\n",
    "text = \"Hello123World456\"\n",
    "extracted_digits = extract_digits(text)\n",
    "print(\"Extracted digits:\", extracted_digits)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b2e522c-d3c2-4e09-95d5-3d837bd6dc0c",
   "metadata": {},
   "source": [
    "25. Extract all alphabets from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "20f2b0b1-f13b-44ae-bcba-22e640dba70a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "abcDFE\n",
      "\n"
     ]
    }
   ],
   "source": [
    "def extract_alphabets(s):\n",
    "    return ''.join([alpha for alpha in s if alpha.isalpha()])\n",
    "\n",
    "print(extract_alphabets(\"abcDFE123\")) # \"abc\"\n",
    "print(extract_alphabets(\"\")) # \"\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37b5fc18-68ba-4b72-87ce-b0c04fa1e0b1",
   "metadata": {},
   "source": [
    "26. Count the number of uppercase letters in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "59c19d62-807b-407e-9b13-8ed4b14086e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "def count_uppercase_letters(s):\n",
    "    return sum(1 for char in s if char.isupper())\n",
    "\n",
    "print(count_uppercase_letters(\"abcABC123\")) # 2\n",
    "print(count_uppercase_letters(\"abc 123\")) # 0\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9d3f731-e247-4b3b-a733-9c3a7d57ad5e",
   "metadata": {},
   "source": [
    "27. Count the number of lowercase letters in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "64f021dd-fb3e-414d-8f57-6f656daa0f84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "def count_lowercase_letters(s):\n",
    "    return sum(1 for char in s if char.islower())\n",
    "\n",
    "print(count_lowercase_letters(\"abcABC123\")) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf73c1c2-3e11-49be-97da-d4d5830ac039",
   "metadata": {},
   "source": [
    "28. Swap the case of each character in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "59278baa-4a49-48d5-bcad-e87a1ff7975f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GEEKSfORGeEKS\n"
     ]
    }
   ],
   "source": [
    "string = \"geeksForgEeks\"\n",
    "result = string.swapcase()\n",
    "print(result)  # Output: GEEKSforgeeks"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "137447ef-6a39-498f-a396-083c9f873821",
   "metadata": {},
   "source": [
    "29. Remove a specific word from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a4481aea-7dd2-4584-abcd-6c4a91d0947c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "for  for\n"
     ]
    }
   ],
   "source": [
    "string = \"geeksforgeeks geeks geeksforgeeks\"\n",
    "word_to_remove = \"geeks\"\n",
    "\n",
    "result = string.replace(word_to_remove, \"\")\n",
    "print(result) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e35b0067-a88b-456f-8fba-78ccefac3957",
   "metadata": {},
   "source": [
    "30. Check if a string is a valid email address."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "532cdc9d-bd70-4ec6-a868-70f12c581e28",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "import re  # Import the regular expression module\n",
    "\n",
    "def is_valid_email(email):\n",
    "    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'  # Regular expression pattern for a basic email validation\n",
    "    if re.match(pattern, email):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "# Example email addresses\n",
    "email1 = \"example@email.com\"\n",
    "email2 = \"invalid-email\"\n",
    "result1 = is_valid_email(email1)\n",
    "result2 = is_valid_email(email2)\n",
    "print(result1)\n",
    "print(result2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2c7af39f-754f-450c-a512-190cd3ecfdf4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "john.doe@example.com is a valid email address.\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def validate_email(email):\n",
    "    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n",
    "    if re.match(pattern, email):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "# Example usage\n",
    "email = \"john.doe@example.com\"\n",
    "if validate_email(email):\n",
    "    print(f\"{email} is a valid email address.\")\n",
    "else:\n",
    "    print(f\"{email} is not a valid email address.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f7fee9d-eefb-4f25-bb04-cf836a5a2396",
   "metadata": {},
   "source": [
    "31. Extract the username from an email address string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "141798b3-f6ce-4e6a-995b-098dd57b01e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The username of the email address is john.doe.\n"
     ]
    }
   ],
   "source": [
    "def extract_username(email):\n",
    "    username = email.split('@')[0]\n",
    "    return username\n",
    "\n",
    "# Example usage\n",
    "email = \"john.doe@example.com\"\n",
    "username = extract_username(email)\n",
    "print(f\"The username of the email address is {username}.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bc5a223-8633-4874-9403-15a57e1cf6d2",
   "metadata": {},
   "source": [
    "32. Extract the domain name from an email address string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5ed3a68a-4c5d-4785-8139-a954cf809ae7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The domain name of the email address is example.com.\n"
     ]
    }
   ],
   "source": [
    "def extract_domain(email):\n",
    "    domain = email.split('@')[1]\n",
    "    return domain\n",
    "\n",
    "# Example usage\n",
    "email = \"john.doe@example.com\"\n",
    "domain = extract_domain(email)\n",
    "print(f\"The domain name of the email address is {domain}.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e46360fb-460c-43e9-a896-20cb668b1955",
   "metadata": {},
   "source": [
    "33. Replace multiple spaces in a string with a single space."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "21334838-3510-4fb3-987d-2c7ad0b20f4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is a sample string with multiple spaces.\n"
     ]
    }
   ],
   "source": [
    "# Define a string with multiple spaces\n",
    "input_string = \"This    is a   sample   string with   multiple   spaces.\"\n",
    "\n",
    "# Split the string into words, and then join them together with a single space\n",
    "output_string = ' '.join(input_string.split())\n",
    "\n",
    "# Print the result\n",
    "print(output_string)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f1cd8af-ceb5-44b0-934f-e2bdefa32b32",
   "metadata": {},
   "source": [
    "34. Check if a string is a valid URL."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ec21440c-b3ee-42fa-8177-5e4ee8244992",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "from urllib.parse import urlparse\n",
    "\n",
    "def is_valid_url(url):\n",
    "    try:\n",
    "        result = urlparse(url)\n",
    "        return all([result.scheme, result.netloc])\n",
    "    except ValueError:\n",
    "        return False\n",
    "\n",
    "# Test the function with a valid URL\n",
    "valid_url = \"https://www.example.com\"\n",
    "print(is_valid_url(valid_url)) # Output: True\n",
    "\n",
    "# Test the function with an invalid URL\n",
    "invalid_url = \"not a valid URL\"\n",
    "print(is_valid_url(invalid_url)) # Output: False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "84e38fd5-4cc4-4828-af69-24be002b9c1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "from urllib.parse import urlparse\n",
    "\n",
    "def is_valid_url(url):\n",
    "    try:\n",
    "        result = urlparse(url)\n",
    "        return all([result.scheme, result.netloc])  # Check if both scheme and netloc are present\n",
    "    except ValueError:\n",
    "        return False\n",
    "\n",
    "# Example URLs\n",
    "url1 = \"https://www.example.com\"\n",
    "url2 = \"invalid-url\"\n",
    "result1 = is_valid_url(url1)\n",
    "result2 = is_valid_url(url2)\n",
    "print(result1)  # Should print True\n",
    "print(result2)  # Should print False"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c2ddee5-b9a4-4500-86f5-34c06646651f",
   "metadata": {},
   "source": [
    "35.Extract the protocol (http or https) from a URL string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d085afb7-b548-4022-b8d2-11efaf3c4997",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "http\n"
     ]
    }
   ],
   "source": [
    "from urllib.parse import urlparse\n",
    "\n",
    "def extract_protocol(url):\n",
    "    parsed_url = urlparse(url)\n",
    "    return parsed_url.scheme\n",
    "\n",
    "# Example usage\n",
    "url = 'http://www.example.com'\n",
    "print(extract_protocol(url))  # prints 'http'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cccddcdd-7b6d-49c7-aad1-eb7ca98cc5dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "36.Find the frequency of each character in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8ef66629-0b58-4e64-9f99-c4e8bdc1f399",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'H': 1, 'e': 1, 'l': 3, 'o': 2, 'W': 1, 'r': 1, 'd': 1}\n"
     ]
    }
   ],
   "source": [
    "def character_frequency(string):\n",
    "    frequency = {}\n",
    "    for char in string:\n",
    "        if char.isalpha():  # Check if the character is alphabetic\n",
    "            if char in frequency:\n",
    "                frequency[char] += 1\n",
    "            else:\n",
    "                frequency[char] = 1\n",
    "    return frequency\n",
    "\n",
    "# Example usage\n",
    "text = 'Hello, World!'\n",
    "print(character_frequency(text))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2e774014-8fbf-458b-a742-daf9670ea7d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'T': 1, 'h': 2, 'i': 4, 's': 5, 'b': 1, 'e': 4, 't': 3, 'x': 1, 'a': 1, 'm': 1, 'p': 1, 'l': 1, 'f': 1, 'o': 2, 'r': 1, 'q': 1, 'u': 1, 'n': 1}\n"
     ]
    }
   ],
   "source": [
    "string=\"This is best example for this question\"\n",
    "dict={}\n",
    "for i in string:\n",
    "    if i==\" \":\n",
    "        continue\n",
    "    else:\n",
    "        dict[i]=string.count(i)\n",
    "print(dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45c7cb5f-ccef-473e-ac41-00d3918701e0",
   "metadata": {},
   "source": [
    "37.Remove all punctuation from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b307c981-358a-4bf8-a306-5033f14c24d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I am stuck in the small places  what I have to do now\n"
     ]
    }
   ],
   "source": [
    "string=\"I am stuck!, in the small place's . what I have to do now?\"\n",
    "pun='''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n",
    "for i in string:\n",
    "    if (i in pun):\n",
    "        string=string.replace(i,'')\n",
    "print(string)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9eeb3add-9183-456c-8f4f-c5bbe940a23a",
   "metadata": {},
   "source": [
    "38.Check if a string contains only digits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9334eae4-fcea-464e-93f2-8cc7261fca1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "string has only numbers\n"
     ]
    }
   ],
   "source": [
    "string=\"773987498106934\"\n",
    "num=0\n",
    "alpha=0\n",
    "for i in string:\n",
    "    if (i.isnumeric()):\n",
    "        num+=1\n",
    "    else:\n",
    "        alpha+=1\n",
    "if num>alpha and alpha==0:\n",
    "    print(\"string has only numbers\")\n",
    "elif num<alpha and num==0:\n",
    "    print(\"string has only alphabets\")\n",
    "else:\n",
    "    print(\"string has both numbers and alphabets\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "220fe045-72b6-4a2f-93ed-dd37893897d8",
   "metadata": {},
   "source": [
    "39.Check if a string contains only alphabets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ae5ba9d2-3983-4e8d-a85a-5e138998cb11",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "string has only alphabets\n"
     ]
    }
   ],
   "source": [
    "string=\"adfkajoidjirjemojfiosajsd\"\n",
    "num=0\n",
    "alpha=0\n",
    "for i in string:\n",
    "    if (i.isnumeric()):\n",
    "        num+=1\n",
    "    else:\n",
    "        alpha+=1\n",
    "if num>alpha and alpha==0:\n",
    "    print(\"string has only numbers\")\n",
    "elif num<alpha and num==0:\n",
    "    print(\"string has only alphabets\")\n",
    "else:\n",
    "    print(\"string has both numbers and alphabets\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2d55c76-311b-49b5-a749-ae1e9cfb8afc",
   "metadata": {},
   "source": [
    "40.Convert a string to a list of characters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "053c67b6-e5ca-4d7a-8b9b-feca6363935c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['I', 'am', 'from', 'India']\n"
     ]
    }
   ],
   "source": [
    "string=\"I am from India\"\n",
    "list=string.split()\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ead7e03e-a1dd-43da-9223-5b71b2d6415a",
   "metadata": {},
   "source": [
    "41.Check if two strings are anagrams."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "253376ce-3484-430d-b1f4-b3ca8c5a5c94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Strings are anagram\n"
     ]
    }
   ],
   "source": [
    "string1=\"Entry\"\n",
    "string2=\"Entry\"\n",
    "if (sorted(string1)==sorted(string2)):\n",
    "    print(\"Strings are anagram\")\n",
    "else:\n",
    "    print(\"Strings are not anagram\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35f51179-1648-455e-b671-c5df8dfe9118",
   "metadata": {},
   "source": [
    "42.Encode a string using a Caesar cipher."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dd6a4284-14e8-4352-95b1-013994a8f7ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dwwdfn dw gdzq!\n"
     ]
    }
   ],
   "source": [
    "def caesar_encode(string, shift):\n",
    "    encoded = \"\"\n",
    "    for char in string:\n",
    "        if char.isalpha():\n",
    "            ascii_offset = ord('a') if char.islower() else ord('A')\n",
    "            encoded += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n",
    "        else:\n",
    "            encoded += char\n",
    "    return encoded\n",
    "\n",
    "# Example usage\n",
    "print(caesar_encode(\"Attack at dawn!\", 3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "059bdaf2-a494-4d3e-b386-24ca6e20f7fb",
   "metadata": {},
   "source": [
    "43.Decode a Caesar cipher encoded string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2baa4b8e-217d-45fe-a5f2-279e9fc8f2dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Attack at dawn!\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def caesar_decode(encoded_string, shift):\n",
    "    decoded = \"\"\n",
    "    for char in encoded_string:\n",
    "        if char.isalpha():\n",
    "            ascii_offset = ord('a') if char.islower() else ord('A')\n",
    "            decoded += chr((ord(char) - ascii_offset - shift) % 26 + ascii_offset)\n",
    "        else:\n",
    "            decoded += char\n",
    "    return decoded\n",
    "\n",
    "# Example usage\n",
    "print(caesar_decode(\"Dwwdfn dw gdzq!\", 3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15a6af57-e612-44ad-9651-7b5dc392bf89",
   "metadata": {},
   "source": [
    "44.Find the most frequent word in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7e528cd5-00b9-46f5-99df-fbb514e39c4f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l\n"
     ]
    }
   ],
   "source": [
    "string=\"iam pallavi loving lovlly\"\n",
    "count=0\n",
    "char=string[0]\n",
    "for i in string:\n",
    "    if string.count(i)>count:\n",
    "        count=string.count(i)\n",
    "        char=i\n",
    "print(char)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f07fbd22-6d31-46b7-88c8-dd93bba475c2",
   "metadata": {},
   "source": [
    "45.Find all unique words in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ff49fc65-182c-4afe-97b5-8b858e42d6f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p v i "
     ]
    }
   ],
   "source": [
    "string=\"pallavi\"\n",
    "for i in string:\n",
    "    if string.count(i)==1:\n",
    "        print(i, end=\" \")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffbbc115-dd8b-4481-af0e-cf14979e4c06",
   "metadata": {},
   "source": [
    "46.Count the number of syllables in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "bd9b3749-868c-456e-8e04-8254ca71a082",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    }
   ],
   "source": [
    "def count_syllables(string):\n",
    "    \"\"\"\n",
    "    Count the number of syllables in a string\n",
    "    \"\"\"\n",
    "    word_list = string.split()\n",
    "    num_syllables = 0\n",
    "    for word in word_list:\n",
    "        num_vowels = sum(1 for char in word if char.lower() in \"aeiouy\")\n",
    "        if num_vowels == 1:\n",
    "            num_syllables += 1\n",
    "        elif num_vowels > 1 and word.endswith(\"e\"):\n",
    "            num_syllables += num_vowels // 2\n",
    "        else:\n",
    "            num_syllables += num_vowels // 2 + 1\n",
    "    return num_syllables\n",
    "\n",
    "# Example usage\n",
    "text = \"This is a sample text for testing syllable count.\"\n",
    "print(count_syllables(text))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f082f26-54c7-4d49-b873-55f3b38d8dfa",
   "metadata": {},
   "source": [
    "47.Check if a string contains any special characters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cb9c18da-5c89-47ab-a113-d02a87cbc522",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "String has special characters\n"
     ]
    }
   ],
   "source": [
    "string=\"pallavi@gmail.com\"\n",
    "if string.isalnum():\n",
    "    print(\"String has no special characters\")\n",
    "else:\n",
    "    print(\"String has special characters\") "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a210a49b-6068-4c82-8c43-d94eeb9bc340",
   "metadata": {},
   "source": [
    "48.Remove the nth word from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "34f09ec4-9694-47bf-b321-16daf53e7ad8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "string is str\n"
     ]
    }
   ],
   "source": [
    "string=\"string is written str\"\n",
    "list=string.split()\n",
    "list.pop(2)\n",
    "print(' '.join(list))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d209f34-bea0-415d-8ebd-aa46c9e004a2",
   "metadata": {},
   "source": [
    "49.Insert a word at the nth position in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3d79710e-ce98-4852-91af-a9e7c7023b90",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "string is written as str\n"
     ]
    }
   ],
   "source": [
    "string=\"string is written str\"\n",
    "list=string.split()\n",
    "list.insert(3, 'as')\n",
    "print(' '.join(list))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77b04f29-66d8-468a-88bb-b17609426ee9",
   "metadata": {},
   "source": [
    "50.Convert a CSV string to a list of lists."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7269c6ea-bc17-43d0-954f-c7e27ac72464",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Welcome', 'to', 'India']\n"
     ]
    }
   ],
   "source": [
    "string=\"Welcome,to,India\"\n",
    "list=string.split(',')\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "5e601a79-81de-46e9-b610-5967d848e03b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h1>List Based Practice Problem solution</h1>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import display, HTML\n",
    "display(HTML('<h1>List Based Practice Problem solution</h1>'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef5ebb4d-dbd5-4eef-8dd6-147724cc3bea",
   "metadata": {},
   "source": [
    "1.Create a list with integers from 1 to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e248a6ee-5dd9-4e83-85cf-e751fe9988f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
     ]
    }
   ],
   "source": [
    "list=[1,2,3,4,5,6,7,8,9,10]\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71f0d3ff-b6f1-4ce2-a45f-f1ea959ab38f",
   "metadata": {},
   "source": [
    "2.Find the length of a list without using the `len()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7cd2c0ef-5a12-4891-b96e-06fcd5319143",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "count=0\n",
    "for i in list:\n",
    "    count+=1\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edef1f3c-81ba-4a5c-98ab-731f6520bc89",
   "metadata": {},
   "source": [
    "3.Append an element to the end of a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "06fa957f-95ca-4f3c-925d-6bf3c5c327d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n"
     ]
    }
   ],
   "source": [
    "list.append(11)\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfa2ac6e-4fe1-408a-97f0-33336b44432b",
   "metadata": {},
   "source": [
    "4.Insert an element at a specific index in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ba941eac-d835-4c3a-a375-c599ffe839fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 900, 6, 7, 8, 9, 10, 11]\n"
     ]
    }
   ],
   "source": [
    "list.insert(5,900)\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c73c8e15-bfd9-41b1-a444-c6111877f6c0",
   "metadata": {},
   "source": [
    "5.Remove an element from a list by its value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9ef67774-542e-4911-ba56-b086a340754e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
     ]
    }
   ],
   "source": [
    "list=[1,2,3,4,5,6,7,8,9,10,900]\n",
    "list.remove(900)\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26e8c499-dff1-4e81-9d43-d9635e5447f2",
   "metadata": {},
   "source": [
    "6.Remove an element from a list by its index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "68726e5e-a045-412c-974f-64119f48e58f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 7, 8, 9, 10, 900]\n"
     ]
    }
   ],
   "source": [
    "list=[1,2,3,4,5,6,7,8,9,10,900]\n",
    "list.pop(5)\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "368521d9-9d56-4f98-8dad-93fbf55a3c1d",
   "metadata": {},
   "source": [
    "7.Check if an element exists in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e3e871b2-6b04-4d3a-a9c7-11608d569c83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NO\n"
     ]
    }
   ],
   "source": [
    "if 400 in list:\n",
    "    print(\"Yes number in list\")\n",
    "else:\n",
    "    print(\"NO\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ab3c353-9bd1-4157-a2fc-19aee6a4a777",
   "metadata": {},
   "source": [
    "8.Find the index of the first occurrence of an element in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "b0c9114c-943b-43a9-a1ff-ff7a47f3e80b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list=[1,2,3,4,5,6,7,8,9,10]\n",
    "list.insert(9,7)\n",
    "list.index(7)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "672ebed2-cafe-4756-8f72-282ee6ed3f9b",
   "metadata": {},
   "source": [
    "9.Count the occurrences of an element in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "e05e251a-bc8d-4013-8dd8-f06b2c83062d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list.count(7)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f106cfe-c8aa-4992-af5c-0d5e850334e9",
   "metadata": {},
   "source": [
    "10.Reverse the order of elements in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "5eaa055e-d362-4d74-b364-3322736caa2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10, 7, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list[::-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa0d83dd-591e-4e87-8d52-bd1ba466ce36",
   "metadata": {},
   "source": [
    "11.Sort a list in ascending order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e6cb2c12-7ab1-4c51-83da-ad574ab968b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 5, 5, 7, 8, 80, 89]\n"
     ]
    }
   ],
   "source": [
    "list=[3,5,8,2,89,1,80,5,7,]\n",
    "list.sort()\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d4f968d-9888-4f31-a9f4-0eea7276541f",
   "metadata": {},
   "source": [
    "12.Sort a list in descending order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "91572b34-6219-4b61-a01a-493aae5eede3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[89, 80, 8, 7, 5, 5, 3, 2, 1]\n"
     ]
    }
   ],
   "source": [
    "list.sort(reverse=True)\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be36136e-61df-442e-b903-39406dbefc04",
   "metadata": {},
   "source": [
    "13.Create a list of even numbers from 1 to 20."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "fbfca404-6727-4afc-a2f8-fafda35bb80c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n"
     ]
    }
   ],
   "source": [
    "x=20\n",
    "list=[]\n",
    "for i in range(1,x+1):\n",
    "    if i%2==0:\n",
    "        list.append(i)\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cbc1b97-83cb-4ac4-9fe5-ddd1af968f5b",
   "metadata": {},
   "source": [
    "14.Create a list of odd numbers from 1 to 20."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "b017098e-c6cd-40f8-932d-fcf62479dd5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n"
     ]
    }
   ],
   "source": [
    "x=20\n",
    "list=[]\n",
    "for i in range(1,x+1):\n",
    "    if i%2!=0:\n",
    "        list.append(i)\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "841217bf-5ce7-422f-8354-3cf7a37dc6fd",
   "metadata": {},
   "source": [
    "15.Find the sum of all elements in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "1db82015-ac81-46e0-9b6f-aa12af95b114",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24\n"
     ]
    }
   ],
   "source": [
    "list=[2,4,7,9,2]\n",
    "sum=sum(num for num in list)\n",
    "print(sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "927c4b93-720e-41f6-9c02-cd80f18652f7",
   "metadata": {},
   "source": [
    "16.Find the maximum value in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "23522f93-3fe8-4f56-8cfb-e511aa63f94e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "print(max(list))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b478ddec-116e-491a-9738-171f4b3e0de0",
   "metadata": {},
   "source": [
    "17.Find the minimum value in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "21b26812-4e32-4d70-a8e7-69e61781df46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "print(min(list))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af3a2c2f-c92e-4f92-b4e0-b3b49d451cf9",
   "metadata": {},
   "source": [
    "18.Create a list of squares of numbers from 1 to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "5fc1d4f9-ed66-4b55-a7c1-25f0cefb086d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
     ]
    }
   ],
   "source": [
    "num=10\n",
    "list1=[]\n",
    "for i in range(1,num+1):\n",
    "    list1.append(i**2)\n",
    "print(list1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ded4389c-4f19-442b-be0e-cf740ea67df9",
   "metadata": {},
   "source": [
    "19.Create a list of random numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "b91a4a51-8498-45ca-a928-50581f87d19e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "List of random integers: [1, 77, 48, 8, 100, 73, 54, 75, 4, 83]\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "# Create a list of random integers between 1 and 100\n",
    "random_integers = [random.randint(1, 100) for _ in range(10)]\n",
    "\n",
    "# Print the list of random integers\n",
    "print(\"List of random integers:\", random_integers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1948038-24d0-434c-81d5-9cf0c5b9356a",
   "metadata": {},
   "source": [
    "20.Remove duplicates from a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "943e67ea-c6a2-452c-b3f7-85c2c36bfac6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4, 5, 6, 7, 2, 33, 454]\n"
     ]
    }
   ],
   "source": [
    "l=[4,5,6,7,2,33,454,5,4,5,5]\n",
    "li=[]\n",
    "for i in l:\n",
    "    if i not in li:\n",
    "        li.append(i)\n",
    "print(li)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b42048fc-88ba-4ea8-af6b-597900cc2c17",
   "metadata": {},
   "source": [
    "21.Find the common elements between two lists."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "3803a791-598d-4c9b-a925-19e051bca0b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4, 6, 8]\n"
     ]
    }
   ],
   "source": [
    "l1=[2,4,6,8,5,3,2]\n",
    "l2=[4,8,6,9,10,1]\n",
    "com_ele=[]\n",
    "for i in l1:\n",
    "    if i in l2 and i not in com_ele:\n",
    "        com_ele.append(i)\n",
    "print(com_ele)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32fc42c4-d522-4b2e-92c0-4935f20e631c",
   "metadata": {},
   "source": [
    "22.Find the difference between two lists."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "b6b32445-cd99-47e5-8e0e-ac4da07a8f81",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 5, 9, 10]\n"
     ]
    }
   ],
   "source": [
    "l1=[2,4,6,8,5,3,2]\n",
    "l2=[4,8,6,9,10,1]\n",
    "com_ele=[]\n",
    "for i in l1:\n",
    "    for j in l2:\n",
    "        if i not in l2 and j not in l1 and i not in com_ele and j not in com_ele:\n",
    "            com_ele.append(i)\n",
    "            com_ele.append(j)\n",
    "print(sorted(com_ele))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "048a9815-12d3-413a-a824-077104dbd15b",
   "metadata": {},
   "source": [
    "23.Merge two lists."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "ce7fb6bd-1055-44cf-9a66-ba24cb844d06",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 4, 6, 8, 5, 3, 2, 4, 8, 6, 9, 10, 1]\n"
     ]
    }
   ],
   "source": [
    "l1=[2,4,6,8,5,3,2]\n",
    "l2=[4,8,6,9,10,1]\n",
    "l1.extend(l2)\n",
    "print(l1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7dabbd55-d4ae-4971-89a7-5c1538899e63",
   "metadata": {},
   "source": [
    "24.Multiply all elements in a list by 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "8ad08737-b1de-419c-88a7-42ac503cdb42",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8 16 12 18 20 2 "
     ]
    }
   ],
   "source": [
    "l1=[4,8,6,9,10,1]\n",
    "for i in l1:\n",
    "    print(i*2, end=\" \")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72aa5e67-c945-43bc-b15e-e553c12ca5ea",
   "metadata": {},
   "source": [
    "25.Filter out all even numbers from a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "9ec0fa5b-e0d2-46ba-a0a2-3b4836878675",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 4 6 8 10 "
     ]
    }
   ],
   "source": [
    "l1=[1,2,3,4,5,6,7,8,9,10]\n",
    "for i in l1:\n",
    "    if i%2==0:\n",
    "        print(i, end=\" \")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04a9c516-a755-4721-9334-d10cb40ad78e",
   "metadata": {},
   "source": [
    "26.Convert a list of strings to a list of integers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "c3040c00-fe28-4e56-a12a-3b81ccd0228c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4, 8, 6, 9, 10, 1]\n"
     ]
    }
   ],
   "source": [
    "l1=['4','8','6','9','10','1']\n",
    "l2=[]\n",
    "for i in l1:\n",
    "    l2.append(int(i))\n",
    "print(l2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3b8e6c3-558f-46d8-91cf-b148da51c738",
   "metadata": {},
   "source": [
    "27.Convert a list of integers to a list of strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "e1b7f513-c847-42fc-9703-6b2cca6026f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['4', '8', '6', '9', '10', '1']\n"
     ]
    }
   ],
   "source": [
    "l1=[4,8,6,9,10,1]\n",
    "l2=[]\n",
    "for i in l1:\n",
    "    l2.append(str(i))\n",
    "print(l2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed295cc2-014f-4dc9-ab7b-8f73e5f6e7fa",
   "metadata": {},
   "source": [
    "28.Flatten a nested list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "ca8a54eb-6b4a-4cdf-8038-57c7de664400",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 4, 6, 8, 1, 2, 3, 9, 10]\n"
     ]
    }
   ],
   "source": [
    "l1=[2,4,6,8,[1,2,3],[9,10]]\n",
    "l2=[]\n",
    "for i in l1:\n",
    "    if type(i)!=int: \n",
    "        for ele in i:\n",
    "            l2.append(ele)\n",
    "    else:\n",
    "        l2.append(i)\n",
    "print(l2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "737bac70-0e5e-4459-b6d7-20a5ff58e28a",
   "metadata": {},
   "outputs": [],
   "source": [
    "29.Create a list of the first 10 Fibonacci numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "5355f268-b9da-4b4a-9b6c-3c31235ff197",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n"
     ]
    }
   ],
   "source": [
    "flist=[]\n",
    "fn=0\n",
    "sn=1\n",
    "for i in range(10):\n",
    "    flist.append(fn)\n",
    "    temp=fn\n",
    "    fn=sn\n",
    "    sn=temp+sn\n",
    "print(flist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e68ab395-5383-4980-89ec-d2fa321fd9c9",
   "metadata": {},
   "source": [
    "30.Check if a list is sorted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "0aa85205-15dc-4e82-9b53-c50e34063039",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "list is not sorted\n"
     ]
    }
   ],
   "source": [
    "l1=[1,4,7,3,2]\n",
    "l2=sorted(l1)\n",
    "if l1==l2:\n",
    "    print(\"list is sorted\")\n",
    "else:\n",
    "    print(\"list is not sorted\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "332d8abf-0460-48fd-95fe-1530fc4499e7",
   "metadata": {},
   "source": [
    "31.Rotate a list to the left by `n` positions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dea94bbc-15ce-4730-b63b-d8cfbbcc81c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter how many times rotate left:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 9, 1, 4, 7, 3]\n"
     ]
    }
   ],
   "source": [
    "n=int(input(\"Enter how many times rotate left: \"))\n",
    "l1=[1,4,7,3,2,9]\n",
    "l1=l1[len(l1)-n:len(l1)]+l1[0:len(l1)-n]\n",
    "print(l1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93a77496-4258-4dce-8cfd-4fd6fec562b0",
   "metadata": {},
   "source": [
    "32.Rotate a list to the right by `n` positions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2f44f41c-9069-4b2b-8389-3b159a828190",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter how many times rotate right:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[7, 3, 2, 9, 1, 4]\n"
     ]
    }
   ],
   "source": [
    "n=int(input(\"Enter how many times rotate right: \"))\n",
    "l1=[1,4,7,3,2,9]\n",
    "l1=l1[n:len(l1)]+l1[0:n]\n",
    "print(l1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cada140c-754a-49a5-81ea-afa1c5b7f58f",
   "metadata": {},
   "source": [
    "33.Create a list of prime numbers up to 50."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "eea2cf79-386a-4722-becd-f54e3be09fd5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter number upto where you want prime numbers:   50\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n"
     ]
    }
   ],
   "source": [
    "num=int(input(\"Enter number upto where you want prime numbers:  \"))\n",
    "l=[]\n",
    "for i in range(1,num):\n",
    "    count=0\n",
    "    for j in range(1,i):\n",
    "        if i%j==0:\n",
    "            count+=1\n",
    "    if count<2:\n",
    "        l.append(i)\n",
    "print(l)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "182902eb-84c0-4932-b2f8-38619e85d49f",
   "metadata": {},
   "source": [
    "34.Split a list into chunks of size `n`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b17bbd87-76fa-49f6-9408-fa7543a41ff7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter how many chunks do you need:   3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 22], [33, 44, 55], [66, 77, 88], [99, 100]]\n"
     ]
    }
   ],
   "source": [
    "list=[1,2,3,4,5,6,7,8,9,10,11,22,33,44,55,66,77,88,99,100]\n",
    "N_list=[]\n",
    "chunks=int(input(\"Enter how many chunks do you need:  \"))\n",
    "for i in range(0,len(list),chunks):\n",
    "    N_list.append(list[i:i+chunks])\n",
    "print(N_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9aafc61f-e4fc-4d78-8a7c-6df20deb2877",
   "metadata": {},
   "source": [
    "35.Find the second largest number in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4139641c-4b28-4c48-a075-7a226cae0475",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "555\n"
     ]
    }
   ],
   "source": [
    "list=[1112,27,34,4,5,6,77,8,9,10,11,22,33,44,555,66,88,99,100]\n",
    "l2=sorted(list)\n",
    "print(l2[-2])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0df2ce5f-5984-49c8-badc-fc4d2574ea10",
   "metadata": {},
   "source": [
    "36.Replace every element in a list with its square."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b57c7177-aa48-4d8e-85bb-058489ab73d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[16, 9, 25, 36, 81]\n"
     ]
    }
   ],
   "source": [
    "l=[4,3,5,6,9]\n",
    "for i in range(len(l)):\n",
    "    l[i]=l[i]**2\n",
    "print(l)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26e15205-a49c-4841-91f7-83e51af03a32",
   "metadata": {},
   "source": [
    "37.Convert a list to a dictionary where list elements become keys and their indices become values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4c263888-b2bf-4e21-aac0-906bd2523153",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'PALLAVI': 0, 8: 1, 7.567: 2, 6: 3, 2: 4, 'pw': 5, 'skills': 6, 5: 7}\n"
     ]
    }
   ],
   "source": [
    "list=['PALLAVI',8,7.567,6,2,'pw','skills',5]\n",
    "dict={}\n",
    "for i in range(len(list)):\n",
    "    dict[list[i]]=i\n",
    "print(dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1efa5c6b-d969-423a-909e-4c44585b4b10",
   "metadata": {},
   "source": [
    "38.Shuffle the elements of a list randomly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "290506dd-0bed-4630-a94b-a1d678df186f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[9, 2, 10, 6, 8, 1, 7, 4, 3, 5]\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
    "random.shuffle(my_list)\n",
    "print(my_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "051c0313-98ac-4489-b99b-81c9bdc6ff3f",
   "metadata": {},
   "source": [
    "39.Create a list of the first 10 factorial numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fff29d3b-13e4-4c73-b5b4-2dd449590383",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]\n"
     ]
    }
   ],
   "source": [
    "num=11\n",
    "list=[]\n",
    "for i in range(1,num):\n",
    "    s=1\n",
    "    while i>0:\n",
    "        s*=i\n",
    "        i-=1\n",
    "    list.append(s)\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aec5c023-5b9c-47d2-b5b8-05551a925915",
   "metadata": {},
   "source": [
    "40.Check if two lists have at least one element in common."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4b9b296a-318b-462d-b1ef-f3169cfcd864",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Yes lists having comman element\n"
     ]
    }
   ],
   "source": [
    "l1=[2,3,5,6]\n",
    "l2=[4,5,7,6]\n",
    "for i in l1:\n",
    "    if i in l2:\n",
    "        print(\"Yes lists having comman element\")\n",
    "        break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d6ad249-1596-4ea8-b7af-45ec667fbefe",
   "metadata": {},
   "source": [
    "41.Remove all elements from a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "05e471d1-f513-48a6-8c74-f052fb416fbe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "l1=[2,4,6,8,10]\n",
    "l1.clear()\n",
    "print(l1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fa683c8-2239-4013-b038-1ce2e64d49f2",
   "metadata": {},
   "source": [
    "42.Replace negative numbers in a list with 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b43a2d73-9605-4381-9b7c-097accbd93b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 0, 8, 0, 4, 6, 0]\n"
     ]
    }
   ],
   "source": [
    "l=[1,3,-7,8,-9,4,6,-5]\n",
    "for i in range(len(l)):\n",
    "    if l[i]<0:\n",
    "        l[i]=0\n",
    "print(l)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3388c513-ae46-435d-bd39-7ccc6166ff39",
   "metadata": {},
   "source": [
    "43.Convert a string into a list of words."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e33e07d0-ebf4-4305-830e-69b7c2ab1b14",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Hello,', 'how', 'are', 'you', 'today?']\n"
     ]
    }
   ],
   "source": [
    "text = \"Hello, how are you today?\"\n",
    "word_list = text.split()\n",
    "print(word_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8975836b-8569-4eff-8032-502c3ab96f1e",
   "metadata": {},
   "source": [
    "44.Convert a list of words into a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a61bfe9b-b614-45e1-b5d8-290a68a2a0c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I am Hungry now\n"
     ]
    }
   ],
   "source": [
    "list=['I', 'am', 'Hungry', 'now']\n",
    "print(' '.join(list))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71b2da30-3499-45f2-9eb0-e259330fc18f",
   "metadata": {},
   "source": [
    "45.Create a list of the first `n` powers of 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7a6a346f-11f0-487c-aa67-935fe93b1213",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter how many could be squared:  10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
     ]
    }
   ],
   "source": [
    "N=int(input(\"Enter how many could be squared: \"))\n",
    "l=[]\n",
    "for i in range(1,N+1):\n",
    "    l.append(i**2)\n",
    "print(l)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76775b24-9f2e-4948-b3cd-6650fd2dd571",
   "metadata": {},
   "source": [
    "46.Find the longest string in a list of strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3f828356-cf8e-4826-9d30-9397773313c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ghanashyam\n"
     ]
    }
   ],
   "source": [
    "l_s=['3','ghanashyam','pwskills','Game']\n",
    "h_s=l_s[0]\n",
    "for i in l_s:\n",
    "    if len(i)>len(h_s):\n",
    "        h_s=i\n",
    "print(h_s)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f51136c-bbe9-4cf0-92e0-16ee8358c0f4",
   "metadata": {},
   "source": [
    "47.Find the shortest string in a list of strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "95f312bd-4ee8-4e4d-8d7d-d4e3b2ec7dce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "l_s=['3','Ghanashyam','pwskills','Game']\n",
    "h_s=l_s[0]\n",
    "for i in l_s:\n",
    "    if len(i)<len(h_s):\n",
    "        h_s=i\n",
    "print(h_s)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2bc18c5-c545-4867-8733-5dda8cd85db8",
   "metadata": {},
   "source": [
    "48.Create a list of the first `n` triangular numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6188f459-f76b-4a33-b35b-89a6881a8dcb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter how many triangle numbers do you want:  10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 6, 10, 15, 21, 28, 36, 45, 55]\n"
     ]
    }
   ],
   "source": [
    "num=int(input(\"Enter how many triangle numbers do you want: \"))\n",
    "list=[]\n",
    "first=1\n",
    "n=2\n",
    "for i in range(num):\n",
    "    list.append(first)\n",
    "    first=first+n\n",
    "    n+=1\n",
    "print(list) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a0701cd-2fe6-407d-ad71-74ec37934b3d",
   "metadata": {},
   "source": [
    "49.Check if a list contains another list as a subsequence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e556425d-a86c-42a3-85d6-90a685901984",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "list2 is subset of list1\n"
     ]
    }
   ],
   "source": [
    "list1=[1,3,2,4,6,8]\n",
    "list2=[2,4,6]\n",
    "l=len(list2)\n",
    "for i in range(len(list1)): \n",
    "    if list1[i:i+l]==list2:\n",
    "        print(\"list2 is subset of list1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e57c8860-fb15-4915-afea-404ab9719ce4",
   "metadata": {},
   "source": [
    "50.Swap two elements in a list by their indices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "efaf1be2-7592-4bed-bf38-8483dc84348f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 7, 5, 9]\n"
     ]
    }
   ],
   "source": [
    "list1=[1,3,5,7,9]\n",
    "N=2\n",
    "list1[N], list1[N+1]=list1[N+1], list1[N]\n",
    "print(list1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "e3d6e407-6a23-43f5-88fe-64aabf053016",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h1>Tuple Based Practice Problem solution</h1>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import display, HTML\n",
    "display(HTML('<h1>Tuple Based Practice Problem solution</h1>'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbfec964-3c86-48e0-9953-83d298ede8cd",
   "metadata": {},
   "source": [
    "1.Create a tuple with integers from 1 to 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "10f264d0-bae4-4fc7-a7d6-cc916224f779",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 2, 3, 4, 5)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t=(1,2,3,4,5)\n",
    "t"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a15fd3f8-8589-43e4-be53-d3d688e818a7",
   "metadata": {},
   "source": [
    "2.Access the third element of a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7937b33f-dab5-4e7b-8eac-2915ed746faf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t[2]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b5b9bbc-632d-4a80-92ef-02aeb8c0f9c0",
   "metadata": {},
   "source": [
    "3.Find the length of a tuple without using the `len()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d9b71d75-9f4d-4bbd-b81d-e8558a201301",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    "count=0\n",
    "for i in t:\n",
    "    count+=1\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8530db4a-7ea0-41e9-bafa-e51dee3ee427",
   "metadata": {},
   "source": [
    "4.Count the occurrences of an element in a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c1865d7f-83a4-43fe-b8b5-b0b8e0fd269c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t=(3,4,5,6,7,5,4,4,3)\n",
    "t.count(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4fe3dd9-1219-4ac7-b7d2-e5a442cd4465",
   "metadata": {},
   "source": [
    "5.Find the index of the first occurrence of an element in a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "85fc7815-84e2-4575-b324-f8b5e05c965f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t=(3,4,5,6,7,5,4,4,3)\n",
    "t.index(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "210b1bbc-7924-4e88-8c42-cc0ce28c66ef",
   "metadata": {},
   "source": [
    "6.Check if an element exists in a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6e692e33-e5e7-49fd-b20e-baee57f03820",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Yes\n"
     ]
    }
   ],
   "source": [
    "if 7 in t:\n",
    "    print(\"Yes\")\n",
    "else:\n",
    "    print(\"No\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a208359c-3980-4ee6-9d6e-b43c527ee0b1",
   "metadata": {},
   "source": [
    "7.Convert a tuple to a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d86c4b62-916f-45cf-8599-4764ab27b90e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tuple[3, 4, 5, 6, 7, 5, 4, 4, 3]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t=(3,4,5,6,7,5,4,4,3)\n",
    "list=tuple[t]\n",
    "list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8504f04f-d38a-4849-9f54-3cb590db948d",
   "metadata": {},
   "source": [
    "8.Convert a list to a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f2d79d3a-3289-4c02-8f91-881579ebf6f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('apple', 'banana', 'cherry')\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Define a list\n",
    "my_list = ['apple', 'banana', 'cherry']\n",
    "\n",
    "# Convert the list to a tuple\n",
    "my_tuple = tuple(my_list)\n",
    "\n",
    "# Print the tuple\n",
    "print(my_tuple)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7079f685-8dfd-4332-8256-f09a04dc66b0",
   "metadata": {},
   "source": [
    "9.Unpack the elements of a tuple into variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ceff04c4-3021-444e-a9ad-4cc2402f3b39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apple\n",
      "banana\n",
      "cherry\n"
     ]
    }
   ],
   "source": [
    "my_tuple = ('apple', 'banana', 'cherry')\n",
    "\n",
    "# Unpack the tuple into variables\n",
    "fruit1, fruit2, fruit3 = my_tuple\n",
    "\n",
    "# Print the variables\n",
    "print(fruit1)\n",
    "print(fruit2)\n",
    "print(fruit3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "542e052e-59fc-495b-bade-719db1a372fc",
   "metadata": {},
   "source": [
    "10.Create a tuple of even numbers from 1 to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b9672314-2a82-4abe-8a3d-9df4e404ad76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 4 6 8 10 "
     ]
    }
   ],
   "source": [
    "for i in range(1,11):\n",
    "    if i%2==0:\n",
    "        print(i, end=\" \")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "473bb4d6-2600-440d-83a1-b75a9fb5900b",
   "metadata": {},
   "source": [
    "11.Create a tuple of odd numbers from 1 to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "7a799f22-8983-42bc-b888-47300a893bde",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 3 5 7 9 "
     ]
    }
   ],
   "source": [
    "for i in range(1,11):\n",
    "    if i%2!=0:\n",
    "        print(i, end=\" \")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d5ad565-4914-4821-8b17-fe96a2bbe5c7",
   "metadata": {},
   "source": [
    "12.Concatenate two tuples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "bf7295d4-7c00-4efc-bd23-86b7e3eba17a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t1=(1,2,3,4,5)\n",
    "t2=(6,7,8,9,10)\n",
    "t1+t2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ffffffe-40d2-464e-b29a-e3ca5e75529d",
   "metadata": {},
   "source": [
    "13.Repeat a tuple three times."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "98d825f6-07c2-4b14-8d6a-80a1ebb3aaba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n"
     ]
    }
   ],
   "source": [
    "t1=(1,2,3,4,5)\n",
    "print(t1*3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "550679e7-b458-46cd-81d6-1bea9de23683",
   "metadata": {},
   "source": [
    "14.Check if a tuple is empty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "23ffc94a-1018-44dd-bae4-5a85255ed1b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tuple is empty\n"
     ]
    }
   ],
   "source": [
    "t1=()\n",
    "if len(t1)>0:\n",
    "    print(\"tuple is not empty\")\n",
    "else:\n",
    "    print(\"tuple is empty\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "224e3bf8-46e1-4245-9030-b707f7531745",
   "metadata": {},
   "source": [
    "15.Create a nested tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "700f49e4-29bb-473e-a690-36b34778731b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 5, 6, (3, 2))"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t2=(1,5,6,(3,2))\n",
    "t2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe6d98a3-d044-4363-b263-77f98aa88afa",
   "metadata": {},
   "source": [
    "16.Access the first element of a nested tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "8262572b-44bf-445b-a8a2-269b1a0b1879",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t2[3][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bff3cbb8-50aa-4628-90ce-ce7e8b414a6f",
   "metadata": {},
   "source": [
    "17.Create a tuple with a single element."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f57265b7-0e59-4eda-b9c8-dfcc217e6403",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tuple"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t5=(5,)\n",
    "type(t5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "355c13f5-20b5-4deb-82d0-7c540e80c420",
   "metadata": {},
   "source": [
    "18.Compare two tuples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "540e653b-65ab-4ca3-9c70-96428fac4915",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Both tuples are different\n"
     ]
    }
   ],
   "source": [
    "t1=(1,2,3,4,5)\n",
    "t2=(3,4,5,6,7)\n",
    "if sorted(t1)==sorted(t2):\n",
    "    print(\"Both tuples are same\")\n",
    "else:\n",
    "    print(\"Both tuples are different\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91cf8549-5a65-4bba-837f-63aa1ff11b38",
   "metadata": {},
   "source": [
    "19.Delete a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7f7c3b52-ff98-492c-b4a5-5f57ca445c35",
   "metadata": {},
   "outputs": [],
   "source": [
    "t1=(1,2,3,4,5)\n",
    "del t1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec300203-3f53-4ebb-8eee-a1cac877ac9c",
   "metadata": {},
   "source": [
    "20.Slice a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4e486898-f44a-42e1-95aa-e72e6f549d2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 6, 7)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t1=(3,4,5,6,7,8)\n",
    "t1[2:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81d98e44-5530-4fa7-9c47-f1d395896f31",
   "metadata": {},
   "source": [
    "21.Find the maximum value in a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5cd2fed3-0eb7-45e3-8f21-129880d97434",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t1=(9,4,8,6,7,8)\n",
    "max(t1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1d0553a-6f26-492c-8de1-3b706e83e66c",
   "metadata": {},
   "source": [
    "22.Find the minimum value in a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b3640bbe-8ff4-4451-99e6-7831656be016",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min(t1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93fde313-91b6-4e85-a1c0-f296219eefcb",
   "metadata": {},
   "source": [
    "23.Convert a string to a tuple of characters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bcd993ac-9a31-4ef0-ba7d-43d7530e9bb2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('I', 'am', 'Pallavi')\n"
     ]
    }
   ],
   "source": [
    "string=\"I am Pallavi\"\n",
    "l=string.split()\n",
    "t=tuple(i for i in l)\n",
    "print(t)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7711dc94-f576-4fb5-931a-ee4110493204",
   "metadata": {},
   "source": [
    "24.Convert a tuple of characters to a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a540b979-b456-4c37-934c-26e07e7ea8ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I am Pallavi\n"
     ]
    }
   ],
   "source": [
    "print(' '.join(t))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de854845-d8b1-4e83-9487-40819ec24c31",
   "metadata": {},
   "source": [
    "25.Create a tuple from multiple data types."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "36178760-0adc-4ed2-aa0f-ae1461987045",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 'kiya', 9.14, True, [1, 2, 3], {'name': 'meera', 'age': 30})\n"
     ]
    }
   ],
   "source": [
    "my_tuple = (1, 'kiya', 9.14, True, [1, 2, 3], {'name': 'meera', 'age': 30})\n",
    "print(my_tuple)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85336a0c-c0a2-4d2c-aae9-4768436a2e29",
   "metadata": {},
   "source": [
    "26.Check if two tuples are identical."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5e4c69b9-b72f-4274-a835-2e65bb5a7e6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tuple1 and tuple2 are identical.\n"
     ]
    }
   ],
   "source": [
    "tuple1 = (1, 'meera', 3.14)\n",
    "tuple2 = (1, 'meera', 3.14)\n",
    "\n",
    "if tuple1 == tuple2:\n",
    "    print(\"tuple1 and tuple2 are identical.\")\n",
    "else:\n",
    "    print(\"tuple1 and tuple2 are not identical.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc52b676-7e1f-4c4d-94c3-1759bdf033d8",
   "metadata": {},
   "source": [
    "27.Sort the elements of a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d2e9dfae-906e-4513-b604-8186b8f7e72d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 3, 4, 5, 6, 7, 8, 9, 10)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t=(7,8,4,5,6,2,3,9,10)\n",
    "tuple(sorted(t))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "033c6f42-44f4-41fd-a478-f3caf6ba1b70",
   "metadata": {},
   "source": [
    "28.Convert a tuple of integers to a tuple of strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0247aa6b-9b8d-438d-ad17-b6253628b98a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('7', '8', '4', '5', '6', '2', '3', '9', '10')\n"
     ]
    }
   ],
   "source": [
    "t=(7,8,4,5,6,2,3,9,10)\n",
    "t2=[]\n",
    "for i in t:\n",
    "    t2.append(str(i))\n",
    "print(tuple(t2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26bfdf9e-b4f6-4f21-b211-56d0184f7229",
   "metadata": {},
   "source": [
    "29.Convert a tuple of strings to a tuple of integers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "de8d8011-da8e-4a8b-a176-afd351fe9939",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(7, 8, 4, 5, 6, 2, 3, 9, 10)\n"
     ]
    }
   ],
   "source": [
    "t=('7','8','4','5','6','2','3','9','10')\n",
    "t2=[]\n",
    "for i in t:\n",
    "    t2.append(int(i))\n",
    "print(tuple(t2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea5c4f7f-87a7-43f0-bda2-30b0303e4c08",
   "metadata": {},
   "source": [
    "30.Merge two tuples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "657b97f2-5db2-43f4-96ca-112ad716918d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 3, 4, 5, 6, 7, 8, 9, 23, 4)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t1=(2,3,4,5,6)\n",
    "t2=(7,8,9,23,4)\n",
    "t=t1+t2\n",
    "t"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba837dcf-e0a9-4dd3-a5bc-7e64b68cc4ca",
   "metadata": {},
   "source": [
    "31.Flatten a nested tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fd3330be-96d2-46b1-8bda-525e399c4eb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 6, 7, 8, 10, 22)\n"
     ]
    }
   ],
   "source": [
    "t=(1,2,3,(6,7,8),(10,22))\n",
    "t2=[]\n",
    "for i in t:\n",
    "    if type(i)==tuple:\n",
    "        for ele in i:\n",
    "            t2.append(ele)\n",
    "    else:\n",
    "        t2.append(i)\n",
    "print(tuple(t2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa6d2b05-0fce-491a-9ddc-371db750d9e0",
   "metadata": {},
   "source": [
    "32.Create a tuple of the first 5 prime numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f9409964-435d-47f6-80a6-e9bdf992efa2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 5, 7)\n"
     ]
    }
   ],
   "source": [
    "t=[]\n",
    "for i in range(1,10):\n",
    "    count=0\n",
    "    for j in range(1,i):\n",
    "        if i%j==0:\n",
    "            count+=1\n",
    "    if count<2:\n",
    "        t.append(i)\n",
    "print(tuple(t))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8a080dd-0e1c-47ab-b9f8-21321d54ea3e",
   "metadata": {},
   "source": [
    "33.Check if a tuple is a palindrome."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c9eb3b56-f246-4068-b4db-8528ae7d0552",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tuple is not palindrome\n"
     ]
    }
   ],
   "source": [
    "t1=(2,3,4,5,6,5)\n",
    "if t1==t1[::-1]:\n",
    "    print(\"tuple is palindrome\")\n",
    "else:\n",
    "    print(\"tuple is not palindrome\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3510a6fe-0d0c-4409-9f74-2c5d2a021043",
   "metadata": {},
   "source": [
    "34.Create a tuple of squares of numbers from 1 to 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1f278cfb-b795-41ad-915c-721c0814dd72",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 4, 9, 16, 25)\n"
     ]
    }
   ],
   "source": [
    "l=[]\n",
    "for i in range(1,6):\n",
    "    l.append(i**2)\n",
    "print(tuple(l))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0250c9e8-989b-421a-b5b5-6adcdd4a394c",
   "metadata": {},
   "source": [
    "35.Filter out all even numbers from a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b662adb3-87ed-4fea-942d-396bd8033dc3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 4, 6, 8, 10)\n"
     ]
    }
   ],
   "source": [
    "t=(1,2,3,4,5,6,7,8,9,10)\n",
    "l=[]\n",
    "for i in t:\n",
    "    if i%2==0:\n",
    "        l.append(i)\n",
    "print(tuple(l))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dc4f782-c41a-499b-9db5-f6c2bf3e2840",
   "metadata": {},
   "source": [
    "36.Multiply all elements in a tuple by 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e7b4e37b-e917-4351-a2d7-7d8a69e1eb69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)\n"
     ]
    }
   ],
   "source": [
    "t=(1,2,3,4,5,6,7,8,9,10)\n",
    "l=[]\n",
    "for i in t:\n",
    "    l.append(i*2)\n",
    "print(tuple(l))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d301259-ae3a-4e90-9340-0792ac5df48d",
   "metadata": {},
   "source": [
    "37.Create a tuple of random numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d3d6e6bb-3c01-4772-b639-4d99d02a1092",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(23, 69, 95, 22, 100)\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "random_tuple = tuple(random.randint(1, 100) for _ in range(5))\n",
    "print(random_tuple)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38e9df47-affb-44d6-b1ca-be208d3427fb",
   "metadata": {},
   "source": [
    "38.Check if a tuple is sorted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c0083541-423b-4563-a519-013744880062",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No it is not sorted\n"
     ]
    }
   ],
   "source": [
    "\n",
    "t=(8,44,66,777,88888,22222,557343)\n",
    "t2=sorted(t)\n",
    "tuple6=tuple(t2)\n",
    "if t==tuple6:\n",
    "    print(\"Yes it is sorted\")\n",
    "else:\n",
    "    print(\"No it is not sorted\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c992edb7-003c-4c1f-aca7-95dd1cbee407",
   "metadata": {},
   "source": [
    "39.Rotate a tuple to the left by `n` positions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2f4135a9-7057-47f5-a213-ed311d5098e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter how many times rotate left:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22, 56, 1, 4, 7, 3, 2, 9, 10]\n"
     ]
    }
   ],
   "source": [
    "n=int(input(\"Enter how many times rotate left: \"))\n",
    "t1=[1,4,7,3,2,9,10,22,56]\n",
    "t1=t1[len(t1)-n:len(t1)]+t1[0:len(t1)-n]\n",
    "print(t1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "830ad91b-2352-4bed-b222-441fcc93f258",
   "metadata": {},
   "source": [
    "40.Rotate a tuple to the right by `n` positions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6a6c2235-07c3-47bc-a1f6-97cdcabb78c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter how many times rotate right:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[7, 3, 2, 9, 10, 22, 56, 1, 4]\n"
     ]
    }
   ],
   "source": [
    "n=int(input(\"Enter how many times rotate right: \"))\n",
    "t1=[1,4,7,3,2,9,10,22,56]\n",
    "t1=t1[n:len(t1)]+t1[0:n]\n",
    "print(t1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2df19cd7-072a-4611-bd29-7c9b5a1dad1c",
   "metadata": {},
   "source": [
    "41.Create a tuple of the first 5 Fibonacci numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "40bc7134-83c5-471c-a5e4-0dbd5e4acaa0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0, 1, 1, 2, 3, 5)\n"
     ]
    }
   ],
   "source": [
    "list=[]\n",
    "fn=0\n",
    "sn=1\n",
    "for i in range(6):\n",
    "    list.append(fn)\n",
    "    temp=fn\n",
    "    fn=sn\n",
    "    sn=temp+sn\n",
    "print(tuple(list))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8000bdbe-67f0-4c2f-9535-d46285b97784",
   "metadata": {},
   "source": [
    "42.Create a tuple from user input."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abd75836-03bc-48c0-bf0c-06105b3b66d7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter how many numbers do you want to enter into tuple:  5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number for index 0\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number for index 1\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number for index 2\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number for index 3\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 32\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number for index 4\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 35\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 2, 3, 32, 35)\n"
     ]
    }
   ],
   "source": [
    "t=[]\n",
    "n=int(input(\"Enter how many numbers do you want to enter into tuple: \"))\n",
    "for i in range(n):\n",
    "    print(\"Enter number for index\",i)\n",
    "    ele=int(input())\n",
    "    t.append(ele)\n",
    "print(tuple(t))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "839eacf1-34d0-46c2-ac1a-f34202aa8323",
   "metadata": {},
   "source": [
    "43.Swap two elements in a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "20399d98-b8b5-4f7d-8d58-0e955134b21c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter index value to swap elements:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 4, 7, 6, 9, 3, 10, 19, 77)\n"
     ]
    }
   ],
   "source": [
    "tup=(2,4,6,7,9,3,10,19,77)\n",
    "list=list(tup)\n",
    "I=int(input(\"Enter index value to swap elements: \"))\n",
    "list[I], list[I+1]=list[I+1], list[I]\n",
    "print(tuple(list))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d05b2d88-0fa8-49b5-bc2d-f291c45de3b1",
   "metadata": {},
   "source": [
    "44.Reverse the elements of a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d114c2a1-985f-4920-99af-139b6f155bec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(77, 19, 10, 3, 9, 7, 6, 4, 2)\n"
     ]
    }
   ],
   "source": [
    "tup=(2,4,6,7,9,3,10,19,77)\n",
    "print(tup[::-1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c97a210-4d89-4d08-9674-8d661d77115c",
   "metadata": {},
   "source": [
    "45.Create a tuple of the first `n` powers of 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "79fc1bda-3af3-4205-b135-e054c89fda79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter upto where do you want to square numbers:  8\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 4, 9, 16, 25, 36, 49, 64)\n"
     ]
    }
   ],
   "source": [
    "l=[]\n",
    "n=int(input(\"Enter upto where do you want to square numbers: \"))\n",
    "for i in range(1,n+1):\n",
    "    l.append(i**2)\n",
    "print(tuple(l))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80713816-cd3f-4bb3-800b-6f9ec24530c3",
   "metadata": {},
   "source": [
    "46.Find the longest string in a tuple of strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6411f800-7dc4-4844-a99e-747242ea9db3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "my nick name is abhi\n"
     ]
    }
   ],
   "source": [
    "t=('Ganesh','pwskills','my nick name is abhi','as per point','28982')\n",
    "s=t[0]\n",
    "for i in t:\n",
    "    if len(i)>len(s):\n",
    "        s=i\n",
    "print(s)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c4b2cb6-fd87-4901-b4cd-d02f2b47b4a4",
   "metadata": {},
   "source": [
    "47.Find the shortest string in a tuple of strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9a7af2bf-b3ee-4259-9e08-ad08a1dfd7ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "28982\n"
     ]
    }
   ],
   "source": [
    "t=('Gnanesh','pwskills','my nick name is abhi','as per point','28982')\n",
    "s=t[0]\n",
    "for i in t:\n",
    "    if len(i)<len(s):\n",
    "        s=i\n",
    "print(s)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20698796-43cc-41af-860b-93c9714245f0",
   "metadata": {},
   "source": [
    "48.Create a tuple of the first `n` triangular numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f22189d2-1063-4275-ad67-ec27baaf606e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter how many triangle numbers do you want:  5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 3, 6, 10, 15)\n"
     ]
    }
   ],
   "source": [
    "num=int(input(\"Enter how many triangle numbers do you want: \"))\n",
    "list=[]\n",
    "first=1\n",
    "n=2\n",
    "for i in range(num):\n",
    "    list.append(first)\n",
    "    first=first+n\n",
    "    n+=1\n",
    "print(tuple(list))  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43710cd6-3f0a-47d0-aeab-b69234e0757d",
   "metadata": {},
   "source": [
    "49.Check if a tuple contains another tuple as a subsequence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f62fb821-493e-4754-8c8e-6164cd01c8e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "t2 is not subset of t1\n"
     ]
    }
   ],
   "source": [
    "t1=(1,3,2,4,6,8)\n",
    "t2=(2,4,5)\n",
    "if set(t2).issubset(t1):\n",
    "    print(\"t2 is subset of t1\")\n",
    "else:\n",
    "    print(\"t2 is not subset of t1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4633343-6d7d-4dec-9ff2-24a5115c5741",
   "metadata": {},
   "source": [
    "50.Create a tuple of alternating 1s and 0s of length `n`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b7d9687b-9e46-493d-a096-33be579c0eba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter how many numbers do you want to print:  8\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 0, 1, 0, 1, 0, 1, 0)\n"
     ]
    }
   ],
   "source": [
    "l=[]\n",
    "n=int(input(\"Enter how many numbers do you want to print: \"))\n",
    "for i in range(n):\n",
    "    if i%2==0:\n",
    "        l.append(1)\n",
    "    else:\n",
    "        l.append(0)\n",
    "print(tuple(l))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "c338ab86-3095-4b81-aad4-afb2ca9cea26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h1>Set Based Practice Problem solution</h1>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import display, HTML\n",
    "display(HTML('<h1>Set Based Practice Problem solution</h1>'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "054de842-069d-48b7-8bb9-1cbe20ff1184",
   "metadata": {},
   "source": [
    "1.Create a set with integers from 1 to 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "443c6dba-4d81-4500-b3da-dc560fa1bb5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 4, 5}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set={1,2,3,4,5}\n",
    "set"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1bcfd3e-ae90-4391-8e37-72801f4b6f56",
   "metadata": {},
   "source": [
    "2.Add an element to a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9d10fd37-17d1-49b2-933c-54d13c12e829",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 4, 5, 11}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set.add(11)\n",
    "set"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43e33d61-b9a7-4ec8-907f-3c18db3e2232",
   "metadata": {},
   "source": [
    "3.Remove an element from a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9fc0bc31-3f30-4e65-a91e-c46b331f8429",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 4, 5, 11}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set.remove(3)\n",
    "set"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a9fe255-50a7-4181-a6c0-59e59f6cbc37",
   "metadata": {},
   "source": [
    "4.Check if an element exists in a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e66ce50a-fe07-4f38-9205-c25969c9a448",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "5 in set"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c993c37-8e43-4e68-ad8e-48626776aa80",
   "metadata": {},
   "source": [
    "5.Find the length of a set without using the `len()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b7dbfe46-b4f3-4a14-9067-c21928beb1c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    }
   ],
   "source": [
    "set={1,3,5,7,9,2,10}\n",
    "count=0\n",
    "for i in set:\n",
    "    count+=1\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7eb43184-4f3f-4ebf-81e4-3c420bc532ba",
   "metadata": {},
   "source": [
    "6.Clear all elements from a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "94b05ee1-4b09-439a-b66b-86d77cc05625",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "set()"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set={1,3,5,7,9,2,10}\n",
    "set.clear()\n",
    "set"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0578d9d-f6d5-41e6-8101-cb336c8a2749",
   "metadata": {},
   "source": [
    "7.Create a set of even numbers from 1 to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2513df5b-f73d-4db0-aa80-7a1d90b4cf9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{2, 4, 6, 8, 10}\n"
     ]
    }
   ],
   "source": [
    "even_numbers = {x for x in range(1, 11) if x % 2 == 0}\n",
    "print(even_numbers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c3a02fd-3789-4149-9652-f0df156fcf7b",
   "metadata": {},
   "source": [
    "8.Create a set of odd numbers from 1 to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "3363e297-3c30-4018-9f57-0d0c5c0c74b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 3, 5, 7, 9}\n"
     ]
    }
   ],
   "source": [
    "odd_numbers = {x for x in range(1, 11) if x % 2 != 0}\n",
    "print(odd_numbers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c8088fc-0e7e-4806-8c75-23d61aa6d420",
   "metadata": {},
   "source": [
    "9.Find the union of two sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "86efe02a-5195-4bfa-92ef-2ced191643e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 4, 6, 8}"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set1={1,2,3,4}\n",
    "set2={2,4,6,8}\n",
    "set1.union(set2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7d6076a-cdfe-45a2-86ca-da05687011b5",
   "metadata": {},
   "source": [
    "10.Find the intersection of two sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "fd7f6845-4d54-40c5-ad58-d5df859b2eea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{2, 4}"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set1={1,2,3,4}\n",
    "set2={2,4,6,8}\n",
    "set1.intersection(set2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c73a8e06-67c1-4638-a273-4e5558c48abf",
   "metadata": {},
   "source": [
    "11.Find the difference between two sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "cfdaf931-1ee6-450f-a0ae-888fc0db71b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 3, 6, 8}"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set1={1,2,3,4}\n",
    "set2={2,4,6,8}\n",
    "set1.symmetric_difference_update(set2)\n",
    "set1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc3dd28c-70d4-49c5-83c3-9936cfa8a96b",
   "metadata": {},
   "source": [
    "12.Check if a set is a subset of another set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6b80f7a9-c228-4818-907b-cbf59105a54b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No not subset\n"
     ]
    }
   ],
   "source": [
    "set1={1,2,3,4}\n",
    "set2={2,5}\n",
    "if set2.issubset(set1):\n",
    "    print(\"Yes subset\")\n",
    "else:\n",
    "    print(\"No not subset\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45467d9a-85c2-4938-b5b9-094b3bf2b41e",
   "metadata": {},
   "source": [
    "13.Check if a set is a superset of another set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0395a596-0ec5-4280-8957-8e252c65c833",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Yes superset\n"
     ]
    }
   ],
   "source": [
    "set1={1,2,3,4}\n",
    "set2={2,4}\n",
    "if set1.issuperset(set2):\n",
    "    print(\"Yes superset\")\n",
    "else:\n",
    "    print(\"NO not superset\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8074af2a-04ee-403c-9500-64477d19f78b",
   "metadata": {},
   "source": [
    "14.Create a set from a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "01911d90-e959-4e3d-ab51-57f3dccddaaf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n"
     ]
    }
   ],
   "source": [
    "my_list = [1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]\n",
    "my_set = set(my_list)\n",
    "print(my_set)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9298d896-8be1-484b-a129-a480af6ba70b",
   "metadata": {},
   "source": [
    "15.Convert a set to a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9a571de0-d2a7-4d04-ad34-1b2a0b4db2ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 12.344, 'Gnanesh']\n"
     ]
    }
   ],
   "source": [
    "set1={1,2,3,4,'Gnanesh', 12.344}\n",
    "l=list(set1)\n",
    "print(l)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c062c8f2-fca0-49d0-92c1-c64fee505054",
   "metadata": {},
   "source": [
    "16.Remove a random element from a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "96ddfd42-8df1-4c7e-a2e5-3fe8a6b00615",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 12.344, 3, 4, 'dell'}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set1={1,2,3,4,'dell', 12.344}\n",
    "set1.remove(2)\n",
    "set1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "135b78e8-9d04-4b44-ad00-3a3183870cf9",
   "metadata": {},
   "source": [
    "17.Pop an element from a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1faa3e09-fa43-45f3-abbc-6d3bd6719712",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{12.344, 2, 3, 4, 'dell'}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set1={1,2,3,4,'dell', 12.344}\n",
    "set1.pop()\n",
    "set1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba64b4e3-d163-49cc-9331-81b98bd2a6d1",
   "metadata": {},
   "source": [
    "18.Check if two sets have no elements in common."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2890a721-7808-4c08-9f3e-d4f3ac2e44cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sets didn't have common elements\n"
     ]
    }
   ],
   "source": [
    "set1={1,2,3,4}\n",
    "set2={6,8}\n",
    "if set1.intersection(set2):\n",
    "    print(\"sets have common elements\")\n",
    "else:\n",
    "    print(\"sets didn't have common elements\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22dfa741-e29d-4950-a4ee-05cee924c4e2",
   "metadata": {},
   "source": [
    "19.Find the symmetric difference between two sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "10d68249-3da1-4372-9c01-a2d0b1fd09a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 3, 6, 8, 'pwskills'}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set1={1,2,3,4,'pwskills','Dell'}\n",
    "set2={2,4,6,8,'Dell'}\n",
    "set1.symmetric_difference_update(set2)\n",
    "set1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "292548dc-42b7-40a0-8a59-22206c96dfa6",
   "metadata": {},
   "source": [
    "20.Update a set with elements from another set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5f123b7f-a44c-4607-a06c-069a9a3470da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 4, 6, 8, 'Dell', 'pwskills'}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set1={1,2,3,4,'pwskills','Dell'}\n",
    "set2={2,4,6,8,'Dell'}\n",
    "set1.update(set2)\n",
    "set1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8439fd27-1cdc-4d36-b3b8-c02186c8810e",
   "metadata": {},
   "source": [
    "21.Create a set of the first 5 prime numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "374a76dd-19f6-4663-9466-3e8b54265c1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3, 5, 7}\n"
     ]
    }
   ],
   "source": [
    "set1=set()\n",
    "for i in range(1,10):\n",
    "    count=0\n",
    "    for j in range(1,i):\n",
    "        if i%j==0:\n",
    "            count+=1\n",
    "    if count<2:\n",
    "        set1.add(i)\n",
    "print(set1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93628ea0-0891-453b-9f29-7e14fd339422",
   "metadata": {},
   "source": [
    "22.Check if two sets are identical."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "dce82b68-8b67-4885-b52b-2d9314a4ae70",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Yes sets are identical\n"
     ]
    }
   ],
   "source": [
    "set1={1,2,3,4}\n",
    "set2={2,4,1,3}\n",
    "if len(set1)==len(set2) and set1.intersection(set2)==set1:\n",
    "    print(\"Yes sets are identical\")\n",
    "else:\n",
    "    print(\"No sets are not same\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "834fcb51-4177-4eba-a941-ed1e8e2485c9",
   "metadata": {},
   "source": [
    "23.Create a frozen set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ee6d6a27-4125-470a-bf25-731284cbf469",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "frozenset({2, 4, 7, 9, 10})"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set={4,7,2,9,10}\n",
    "set1=frozenset(set)\n",
    "set1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f483de0-204c-437d-931f-dd1597541b64",
   "metadata": {},
   "source": [
    "24.Check if a set is disjoint with another set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e577e8c0-a40e-41c8-8959-c7e1435a794b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set1={1,2,3,4}\n",
    "set2={5,6,7,8,9}\n",
    "set1.isdisjoint(set2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a44a919-fd04-4e4e-ad56-7d8ffbc89af6",
   "metadata": {},
   "source": [
    "25.Create a set of squares of numbers from 1 to 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2915435a-fb90-4bb1-baef-713ea2497c4c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 4, 9, 16, 25}\n"
     ]
    }
   ],
   "source": [
    "squares = {x**2 for x in range(1, 6)}\n",
    "print(squares)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa3f6f85-4dcb-411d-9912-f69b26690851",
   "metadata": {},
   "source": [
    "26.Filter out all even numbers from a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5e6f44e8-f497-4418-bc23-d9ac14637796",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{2, 4, 6, 8, 10}\n"
     ]
    }
   ],
   "source": [
    "numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n",
    "even_numbers = {x for x in numbers if x % 2 == 0}\n",
    "print(even_numbers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf2c86dc-33df-4b1a-906d-e9e3960eeb4b",
   "metadata": {},
   "source": [
    "27.Multiply all elements in a set by 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6c4a6aa5-e2d2-4764-a5df-656d1d66f8f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{2, 4, 6, 8, 10}\n"
     ]
    }
   ],
   "source": [
    "numbers = {1, 2, 3, 4, 5}\n",
    "doubled_numbers = {x * 2 for x in numbers}\n",
    "print(doubled_numbers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53b3bc8d-83c7-45fe-8525-b59761156cf8",
   "metadata": {},
   "source": [
    "28.Create a set of random numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "496a74ee-90a2-4323-9153-5499c161270e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{5, 75, 76, 81, 19, 23, 92, 94, 63}\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "random_numbers = {random.randint(1, 100) for _ in range(10)}\n",
    "print(random_numbers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27c434bf-bacb-466c-b002-38df27fc2112",
   "metadata": {},
   "source": [
    "29.Check if a set is empty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "412c5bee-6ef5-4671-80e0-ed6cfc7c49bf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The set is empty.\n"
     ]
    }
   ],
   "source": [
    "my_set = set()\n",
    "\n",
    "if len(my_set) == 0:\n",
    "    print(\"The set is empty.\")\n",
    "else:\n",
    "    print(\"The set is not empty.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1292ea33-076c-4c89-88e6-0b1949cc3644",
   "metadata": {},
   "source": [
    "30.Create a nested set (hint: use frozenset)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "7ce21492-9efa-4b88-b2f1-408eb14ce971",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "frozenset({100, 2, 7, 9, 'Pallavi', 'pwskills'})"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set7={2,7,9,100,\"Pallavi\",'pwskills'}\n",
    "set1=frozenset(set7)\n",
    "set1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eaf682d0-ecd6-407e-ba9e-31090b04dd21",
   "metadata": {},
   "source": [
    "31.Remove an element from a set using the discard method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "33923c9f-88ea-4d9d-980d-7ba0ab8e3fdf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{100, 2, 7, 9, 'Pallavi'}"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set7={2,7,9,100,\"Pallavi\",'pwskills'}\n",
    "set7.discard('pwskills')\n",
    "set7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59ce06da-6038-4af6-9951-844f1f070157",
   "metadata": {},
   "source": [
    "32.Compare two sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "cab7edab-5618-4984-be00-8d94f2d9fa2b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sets are not same\n"
     ]
    }
   ],
   "source": [
    "set1={1,2,3,4}\n",
    "set2={5,6,7,8,9}\n",
    "if set1==set2:\n",
    "    print(\"sets are same\")\n",
    "else:\n",
    "    print(\"sets are not same\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68e70b8c-1af3-4b0e-95bf-7a188d5fa13f",
   "metadata": {},
   "source": [
    "33.Create a set from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "290833a1-a4e3-4138-a7e3-906e2c30c9c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'22', 'I', 'roll', 'my', 'is', 'number', 'am', 'Gnanesh'}\n"
     ]
    }
   ],
   "source": [
    "string=\"I am Gnanesh my roll number is 22\"\n",
    "l=string.split()\n",
    "print(set(l))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df43beb6-f56d-482c-abed-1922a3ec3678",
   "metadata": {},
   "source": [
    "34.Convert a set of strings to a set of integers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "59bd66c4-345a-4562-841a-ef70f5a7f077",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{16, 22, 27, 28, 30}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set123={'22','16','27','28','30'}\n",
    "set2=set()\n",
    "for i in set123:\n",
    "    set2.add(int(i))\n",
    "set2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bd5da55-664b-4030-8f3b-52f4d0a548ef",
   "metadata": {},
   "source": [
    "35.Convert a set of integers to a set of strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c581a551-4bde-4d32-838a-7d8251e25452",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'16', '22', '27', '28', '30'}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set123={22,16,27,28,30}\n",
    "set2=set()\n",
    "for i in set123:\n",
    "    set2.add(str(i))\n",
    "set2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18aa1b63-112c-4e3d-9178-2fe972fabc0f",
   "metadata": {},
   "source": [
    "36.Create a set from a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "80ba2343-123e-4ed9-85f5-fc5dad7b183c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 3, 45.99, 'pwskills', 'remote'}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tuple1=(1,3,'pwskills','remote',45.99,True)\n",
    "set(tuple1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b40ff90-22ef-43ba-a878-3a589b15afc6",
   "metadata": {},
   "source": [
    "37.Convert a set to a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "288f8df6-b571-4499-83b7-9b2cd3210699",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 3, 'remote', 'pwskills', 45.99)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set1={1,3,'pwskills','remote',45.99,True}\n",
    "tuple(set1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f52fc52-4c2a-49fb-af7a-2079b3916a2e",
   "metadata": {},
   "source": [
    "38.Find the maximum value in a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "1fa51b68-820e-46fb-b93b-3b94e3125706",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set123={22,16,27,28,30}\n",
    "max(set123)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f45e643-84e6-4523-9d8f-9da4ba3b9332",
   "metadata": {},
   "source": [
    "39.Find the minimum value in a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "6d8ff6fc-baea-4b61-9532-a2c983f457fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min(set123)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b474b0d8-7e61-4202-8bff-ce96996e16de",
   "metadata": {},
   "source": [
    "40.Create a set from user input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "21d97072-c8f2-45f3-8c8a-b75b1fe4c7c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter how many numbers do you add into set:  5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number for index  0 :\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 22\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number for index  1 :\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 36\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number for index  2 :\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 390\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number for index  3 :\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 58\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number for index  4 :\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 235\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{22, 36, 58, 235, 390}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set147=set()\n",
    "n=int(input(\"Enter how many numbers do you add into set: \"))\n",
    "for i in range(n):\n",
    "    print(\"Enter number for index \",i,\":\")\n",
    "    ele=int(input())\n",
    "    set147.add(ele)\n",
    "set147"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74521e58-bc22-4fd4-95a9-4d45a35667f4",
   "metadata": {},
   "source": [
    "41.Check if the intersection of two sets is empty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7217594b-0992-4a8d-9d24-594da744e7d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intersection is empty\n"
     ]
    }
   ],
   "source": [
    "set1={1,2,3,4,5}\n",
    "set2={6,7,8,9,10}\n",
    "if set1.intersection(set2)==set():\n",
    "    print(\"Intersection is empty\")\n",
    "else:\n",
    "    print(\"Intersection have elements\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8eb69b0f-2c6e-4c23-a670-3a33047cfb70",
   "metadata": {},
   "source": [
    "42.Create a set of the first 5 Fibonacci numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "99b91f9a-fb50-4a06-8a6a-af5a522e9d72",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0, 1, 2, 3, 5}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set9=set()\n",
    "first=0\n",
    "second=1\n",
    "for i in range(6):\n",
    "    set9.add(first)\n",
    "    temp=first\n",
    "    first=second\n",
    "    second=temp+second\n",
    "set9"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b63ab1e8-039a-495c-b1b6-4fc164a22211",
   "metadata": {},
   "source": [
    "43.Remove duplicates from a list using sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "22dedd72-58a4-4979-aa15-e4ff95553524",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{2, 4, 6, 8, 9}"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set1={2,4,6,8,9,4,8,6,2,6,6,8}\n",
    "set1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d62f2d6e-cfe8-483b-858e-9c281a86a2c4",
   "metadata": {},
   "source": [
    "44.Check if two sets have the same elements, regardless of their count."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "2ed59cc9-6c30-4997-b328-87b9d1909866",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No sets not having different elements\n"
     ]
    }
   ],
   "source": [
    "set1={1,2,3,4}\n",
    "set2={2,4,1,9}\n",
    "if set1.intersection(set2)==set1:\n",
    "    print(\"Yes sets having same elements\")\n",
    "else:\n",
    "    print(\"No sets not having different elements\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed588671-cd43-4a30-90c1-a57c64bc8973",
   "metadata": {},
   "source": [
    "45.Create a set of the first `n` powers of 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "084d324a-8765-4538-b288-cba8d94a6812",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 4, 9, 16, 25, 36, 49, 64, 81, 100}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set9=set()\n",
    "for i in range(1,11):\n",
    "    set9.add(i**2)\n",
    "set9"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3da0e0b5-2a72-4179-9053-f9869fa759fe",
   "metadata": {},
   "source": [
    "46.Find the common elements between a set and a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "1e571718-3889-48b0-9eba-3863d2055b02",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{23.78, 4, 'Gnanesh'}"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set1={'Gnanesh','pwskills',4,8,23.78}\n",
    "list=[2,4,'Gnanesh',23.78,89.33]\n",
    "set1.intersection(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f304227-ce81-42a8-a62c-b1e99b1944c6",
   "metadata": {},
   "source": [
    "47.Create a set of the first `n` triangular numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2f976c4f-f5cc-415c-86e1-eb2996e59435",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter how many triangle numbers do you want:  4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 10, 3, 6}\n"
     ]
    }
   ],
   "source": [
    "num=int(input(\"Enter how many triangle numbers do you want: \"))\n",
    "set8=set()\n",
    "first=1\n",
    "n=2\n",
    "for i in range(num):\n",
    "    set8.add(first)\n",
    "    first=first+n\n",
    "    n+=1\n",
    "print(set8)  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ed2d67f-1503-4620-a7b0-263577296924",
   "metadata": {},
   "source": [
    "48.Check if a set contains another set as a subset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "b58fbd0c-c0fb-4aac-ad9c-d20a55efa9b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Yes set5 is subset of set4\n"
     ]
    }
   ],
   "source": [
    "set4={9,8,6,5,4}\n",
    "set5={8,6,9,4}\n",
    "if set5.issubset(set4):\n",
    "    print(\"Yes set5 is subset of set4\")\n",
    "else:\n",
    "    print(\"No set5 is not subset of set4\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20b9cade-6535-4287-bf78-03ee641ff23a",
   "metadata": {},
   "source": [
    "49.Create a set of alternating 1s and 0s of length `n`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2e8ea33e-2e8e-46fb-9043-4ef82ed29eed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0, 1}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set3=set()\n",
    "for i in range(4):\n",
    "    if i%2==0:\n",
    "        set3.add(1)\n",
    "    else:\n",
    "        set3.add(0)\n",
    "set3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dfa446ff-efe4-4a55-af42-90871f7c8ad0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0, 1}\n"
     ]
    }
   ],
   "source": [
    "n = 10\n",
    "my_set = set(i % 2 for i in range(n))\n",
    "print(my_set)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f75fb9a8-73ab-4a5c-8df0-90fb12b0ecab",
   "metadata": {},
   "source": [
    "50.Merge multiple sets into one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "e427a657-6d93-4c39-bcbd-ad482b42ce85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 10, 2, 3, 45.22, 5, 7, False, 'Gnanesh', 'pwskills'}"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set1={1,3,5,7}\n",
    "set2={2,10,'Gnanesh',False}\n",
    "set3={'pwskills',2,45.22,True}\n",
    "set_m=set1.union(set2,set3)\n",
    "set_m"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
